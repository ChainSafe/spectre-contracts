
// SPDX-License-Identifier: MIT

pragma solidity 0.8.19;

contract Halo2Verifier {
    fallback(bytes calldata) external returns (bytes memory) {
        assembly ("memory-safe") {
            // Enforce that Solidity memory layout is respected
            let data := mload(0x40)
            if iszero(eq(data, 0x80)) {
                revert(0, 0)
            }

            let success := true
            let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
            let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
            function validate_ec_point(x, y) -> valid {
                {
                    let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    valid := and(x_lt_p, y_lt_p)
                }
                {
                    let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let is_affine := eq(x_cube_plus_3, y_square)
                    valid := and(valid, is_affine)
                }
            }
            mstore(0xa0, mod(calldataload(0x0), f_q))
mstore(0xc0, mod(calldataload(0x20), f_q))
mstore(0xe0, mod(calldataload(0x40), f_q))
mstore(0x100, mod(calldataload(0x60), f_q))
mstore(0x120, mod(calldataload(0x80), f_q))
mstore(0x140, mod(calldataload(0xa0), f_q))
mstore(0x160, mod(calldataload(0xc0), f_q))
mstore(0x180, mod(calldataload(0xe0), f_q))
mstore(0x1a0, mod(calldataload(0x100), f_q))
mstore(0x1c0, mod(calldataload(0x120), f_q))
mstore(0x1e0, mod(calldataload(0x140), f_q))
mstore(0x200, mod(calldataload(0x160), f_q))
mstore(0x220, mod(calldataload(0x180), f_q))
mstore(0x240, mod(calldataload(0x1a0), f_q))
mstore(0x260, mod(calldataload(0x1c0), f_q))
mstore(0x80, 17280834194660640204547523903180955033027902575174332788908596807603534277744)

        {
            let x := calldataload(0x1e0)
            mstore(0x280, x)
            let y := calldataload(0x200)
            mstore(0x2a0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x2c0, keccak256(0x80, 576))
{
            let hash := mload(0x2c0)
            mstore(0x2e0, mod(hash, f_q))
            mstore(0x300, hash)
        }

        {
            let x := calldataload(0x220)
            mstore(0x320, x)
            let y := calldataload(0x240)
            mstore(0x340, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x260)
            mstore(0x360, x)
            let y := calldataload(0x280)
            mstore(0x380, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x3a0, keccak256(0x300, 160))
{
            let hash := mload(0x3a0)
            mstore(0x3c0, mod(hash, f_q))
            mstore(0x3e0, hash)
        }
mstore8(1024, 1)
mstore(0x400, keccak256(0x3e0, 33))
{
            let hash := mload(0x400)
            mstore(0x420, mod(hash, f_q))
            mstore(0x440, hash)
        }

        {
            let x := calldataload(0x2a0)
            mstore(0x460, x)
            let y := calldataload(0x2c0)
            mstore(0x480, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x2e0)
            mstore(0x4a0, x)
            let y := calldataload(0x300)
            mstore(0x4c0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x320)
            mstore(0x4e0, x)
            let y := calldataload(0x340)
            mstore(0x500, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x520, keccak256(0x440, 224))
{
            let hash := mload(0x520)
            mstore(0x540, mod(hash, f_q))
            mstore(0x560, hash)
        }

        {
            let x := calldataload(0x360)
            mstore(0x580, x)
            let y := calldataload(0x380)
            mstore(0x5a0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x3a0)
            mstore(0x5c0, x)
            let y := calldataload(0x3c0)
            mstore(0x5e0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x3e0)
            mstore(0x600, x)
            let y := calldataload(0x400)
            mstore(0x620, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x420)
            mstore(0x640, x)
            let y := calldataload(0x440)
            mstore(0x660, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x680, keccak256(0x560, 288))
{
            let hash := mload(0x680)
            mstore(0x6a0, mod(hash, f_q))
            mstore(0x6c0, hash)
        }
mstore(0x6e0, mod(calldataload(0x460), f_q))
mstore(0x700, mod(calldataload(0x480), f_q))
mstore(0x720, mod(calldataload(0x4a0), f_q))
mstore(0x740, mod(calldataload(0x4c0), f_q))
mstore(0x760, mod(calldataload(0x4e0), f_q))
mstore(0x780, mod(calldataload(0x500), f_q))
mstore(0x7a0, mod(calldataload(0x520), f_q))
mstore(0x7c0, mod(calldataload(0x540), f_q))
mstore(0x7e0, mod(calldataload(0x560), f_q))
mstore(0x800, mod(calldataload(0x580), f_q))
mstore(0x820, mod(calldataload(0x5a0), f_q))
mstore(0x840, mod(calldataload(0x5c0), f_q))
mstore(0x860, mod(calldataload(0x5e0), f_q))
mstore(0x880, mod(calldataload(0x600), f_q))
mstore(0x8a0, mod(calldataload(0x620), f_q))
mstore(0x8c0, mod(calldataload(0x640), f_q))
mstore(0x8e0, mod(calldataload(0x660), f_q))
mstore(0x900, mod(calldataload(0x680), f_q))
mstore(0x920, mod(calldataload(0x6a0), f_q))
mstore(0x940, keccak256(0x6c0, 640))
{
            let hash := mload(0x940)
            mstore(0x960, mod(hash, f_q))
            mstore(0x980, hash)
        }
mstore8(2464, 1)
mstore(0x9a0, keccak256(0x980, 33))
{
            let hash := mload(0x9a0)
            mstore(0x9c0, mod(hash, f_q))
            mstore(0x9e0, hash)
        }

        {
            let x := calldataload(0x6c0)
            mstore(0xa00, x)
            let y := calldataload(0x6e0)
            mstore(0xa20, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0xa40, keccak256(0x9e0, 96))
{
            let hash := mload(0xa40)
            mstore(0xa60, mod(hash, f_q))
            mstore(0xa80, hash)
        }

        {
            let x := calldataload(0x700)
            mstore(0xaa0, x)
            let y := calldataload(0x720)
            mstore(0xac0, y)
            success := and(validate_ec_point(x, y), success)
        }
{
            let x := mload(0xa0)
x := add(x, shl(88, mload(0xc0)))
x := add(x, shl(176, mload(0xe0)))
mstore(2784, x)
let y := mload(0x100)
y := add(y, shl(88, mload(0x120)))
y := add(y, shl(176, mload(0x140)))
mstore(2816, y)

            success := and(validate_ec_point(x, y), success)
        }
{
            let x := mload(0x160)
x := add(x, shl(88, mload(0x180)))
x := add(x, shl(176, mload(0x1a0)))
mstore(2848, x)
let y := mload(0x1c0)
y := add(y, shl(88, mload(0x1e0)))
y := add(y, shl(176, mload(0x200)))
mstore(2880, y)

            success := and(validate_ec_point(x, y), success)
        }
mstore(0xb60, mulmod(mload(0x6a0), mload(0x6a0), f_q))
mstore(0xb80, mulmod(mload(0xb60), mload(0xb60), f_q))
mstore(0xba0, mulmod(mload(0xb80), mload(0xb80), f_q))
mstore(0xbc0, mulmod(mload(0xba0), mload(0xba0), f_q))
mstore(0xbe0, mulmod(mload(0xbc0), mload(0xbc0), f_q))
mstore(0xc00, mulmod(mload(0xbe0), mload(0xbe0), f_q))
mstore(0xc20, mulmod(mload(0xc00), mload(0xc00), f_q))
mstore(0xc40, mulmod(mload(0xc20), mload(0xc20), f_q))
mstore(0xc60, mulmod(mload(0xc40), mload(0xc40), f_q))
mstore(0xc80, mulmod(mload(0xc60), mload(0xc60), f_q))
mstore(0xca0, mulmod(mload(0xc80), mload(0xc80), f_q))
mstore(0xcc0, mulmod(mload(0xca0), mload(0xca0), f_q))
mstore(0xce0, mulmod(mload(0xcc0), mload(0xcc0), f_q))
mstore(0xd00, mulmod(mload(0xce0), mload(0xce0), f_q))
mstore(0xd20, mulmod(mload(0xd00), mload(0xd00), f_q))
mstore(0xd40, mulmod(mload(0xd20), mload(0xd20), f_q))
mstore(0xd60, mulmod(mload(0xd40), mload(0xd40), f_q))
mstore(0xd80, mulmod(mload(0xd60), mload(0xd60), f_q))
mstore(0xda0, mulmod(mload(0xd80), mload(0xd80), f_q))
mstore(0xdc0, mulmod(mload(0xda0), mload(0xda0), f_q))
mstore(0xde0, mulmod(mload(0xdc0), mload(0xdc0), f_q))
mstore(0xe00, mulmod(mload(0xde0), mload(0xde0), f_q))
mstore(0xe20, mulmod(mload(0xe00), mload(0xe00), f_q))
mstore(0xe40, mulmod(mload(0xe20), mload(0xe20), f_q))
mstore(0xe60, addmod(mload(0xe40), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0xe80, mulmod(mload(0xe60), 21888241567198334088790460357988866238279339518792980768180410072331574733841, f_q))
mstore(0xea0, mulmod(mload(0xe80), 12929131318670223636853686797196826072950305380535537217467769528748593133487, f_q))
mstore(0xec0, addmod(mload(0x6a0), 8959111553169051585392718948060449015598059019880497126230434657827215362130, f_q))
mstore(0xee0, mulmod(mload(0xe80), 14655294445420895451632927078981340937842238432098198055057679026789553137428, f_q))
mstore(0xf00, addmod(mload(0x6a0), 7232948426418379770613478666275934150706125968317836288640525159786255358189, f_q))
mstore(0xf20, mulmod(mload(0xe80), 12220484078924208264862893648548198807365556694478604924193442790112568454894, f_q))
mstore(0xf40, addmod(mload(0x6a0), 9667758792915066957383512096709076281182807705937429419504761396463240040723, f_q))
mstore(0xf60, mulmod(mload(0xe80), 8734126352828345679573237859165904705806588461301144420590422589042130041188, f_q))
mstore(0xf80, addmod(mload(0x6a0), 13154116519010929542673167886091370382741775939114889923107781597533678454429, f_q))
mstore(0xfa0, mulmod(mload(0xe80), 7358966525675286471217089135633860168646304224547606326237275077574224349359, f_q))
mstore(0xfc0, addmod(mload(0x6a0), 14529276346163988751029316609623414919902060175868428017460929109001584146258, f_q))
mstore(0xfe0, mulmod(mload(0xe80), 9741553891420464328295280489650144566903017206473301385034033384879943874347, f_q))
mstore(0x1000, addmod(mload(0x6a0), 12146688980418810893951125255607130521645347193942732958664170801695864621270, f_q))
mstore(0x1020, mulmod(mload(0xe80), 17329448237240114492580865744088056414251735686965494637158808787419781175510, f_q))
mstore(0x1040, addmod(mload(0x6a0), 4558794634599160729665540001169218674296628713450539706539395399156027320107, f_q))
mstore(0x1060, mulmod(mload(0xe80), 1, f_q))
mstore(0x1080, addmod(mload(0x6a0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0x10a0, mulmod(mload(0xe80), 11451405578697956743456240853980216273390554734748796433026540431386972584651, f_q))
mstore(0x10c0, addmod(mload(0x6a0), 10436837293141318478790164891277058815157809665667237910671663755188835910966, f_q))
mstore(0x10e0, mulmod(mload(0xe80), 8374374965308410102411073611984011876711565317741801500439755773472076597347, f_q))
mstore(0x1100, addmod(mload(0x6a0), 13513867906530865119835332133273263211836799082674232843258448413103731898270, f_q))
mstore(0x1120, mulmod(mload(0xe80), 21490807004895109926141140246143262403290679459142140821740925192625185504522, f_q))
mstore(0x1140, addmod(mload(0x6a0), 397435866944165296105265499114012685257684941273893521957278993950622991095, f_q))
mstore(0x1160, mulmod(mload(0xe80), 11211301017135681023579411905410872569206244553457844956874280139879520583390, f_q))
mstore(0x1180, addmod(mload(0x6a0), 10676941854703594198666993839846402519342119846958189386823924046696287912227, f_q))
mstore(0x11a0, mulmod(mload(0xe80), 18846108080730935585192484934247867403156699586319724728525857970312957475341, f_q))
mstore(0x11c0, addmod(mload(0x6a0), 3042134791108339637053920811009407685391664814096309615172346216262851020276, f_q))
mstore(0x11e0, mulmod(mload(0xe80), 3615478808282855240548287271348143516886772452944084747768312988864436725401, f_q))
mstore(0x1200, addmod(mload(0x6a0), 18272764063556419981698118473909131571661591947471949595929891197711371770216, f_q))
mstore(0x1220, mulmod(mload(0xe80), 21451937155080765789602997556105366785934335730087568134349216848800867145453, f_q))
mstore(0x1240, addmod(mload(0x6a0), 436305716758509432643408189151908302614028670328466209348987337774941350164, f_q))
mstore(0x1260, mulmod(mload(0xe80), 1426404432721484388505361748317961535523355871255605456897797744433766488507, f_q))
mstore(0x1280, addmod(mload(0x6a0), 20461838439117790833741043996939313553025008529160428886800406442142042007110, f_q))
mstore(0x12a0, mulmod(mload(0xe80), 13982290267294411190096162596630216412723378687553046594730793425118513274800, f_q))
mstore(0x12c0, addmod(mload(0x6a0), 7905952604544864032150243148627058675824985712862987748967410761457295220817, f_q))
mstore(0x12e0, mulmod(mload(0xe80), 216092043779272773661818549620449970334216366264741118684015851799902419467, f_q))
mstore(0x1300, addmod(mload(0x6a0), 21672150828060002448584587195636825118214148034151293225014188334775906076150, f_q))
mstore(0x1320, mulmod(mload(0xe80), 9537783784440837896026284659246718978615447564543116209283382057778110278482, f_q))
mstore(0x1340, addmod(mload(0x6a0), 12350459087398437326220121086010556109932916835872918134414822128797698217135, f_q))
mstore(0x1360, mulmod(mload(0xe80), 12619617507853212586156872920672483948819476989779550311307282715684870266992, f_q))
mstore(0x1380, addmod(mload(0x6a0), 9268625363986062636089532824584791139728887410636484032390921470890938228625, f_q))
mstore(0x13a0, mulmod(mload(0xe80), 3947443723575973965644279767310964219908423994086470065513888332899718123222, f_q))
mstore(0x13c0, addmod(mload(0x6a0), 17940799148263301256602125977946310868639940406329564278184315853676090372395, f_q))
mstore(0x13e0, mulmod(mload(0xe80), 18610195890048912503953886742825279624920778288956610528523679659246523534888, f_q))
mstore(0x1400, addmod(mload(0x6a0), 3278046981790362718292519002431995463627586111459423815174524527329284960729, f_q))
{
            let prod := mload(0xec0)

                prod := mulmod(mload(0xf00), prod, f_q)
                mstore(0x1420, prod)
            
                prod := mulmod(mload(0xf40), prod, f_q)
                mstore(0x1440, prod)
            
                prod := mulmod(mload(0xf80), prod, f_q)
                mstore(0x1460, prod)
            
                prod := mulmod(mload(0xfc0), prod, f_q)
                mstore(0x1480, prod)
            
                prod := mulmod(mload(0x1000), prod, f_q)
                mstore(0x14a0, prod)
            
                prod := mulmod(mload(0x1040), prod, f_q)
                mstore(0x14c0, prod)
            
                prod := mulmod(mload(0x1080), prod, f_q)
                mstore(0x14e0, prod)
            
                prod := mulmod(mload(0x10c0), prod, f_q)
                mstore(0x1500, prod)
            
                prod := mulmod(mload(0x1100), prod, f_q)
                mstore(0x1520, prod)
            
                prod := mulmod(mload(0x1140), prod, f_q)
                mstore(0x1540, prod)
            
                prod := mulmod(mload(0x1180), prod, f_q)
                mstore(0x1560, prod)
            
                prod := mulmod(mload(0x11c0), prod, f_q)
                mstore(0x1580, prod)
            
                prod := mulmod(mload(0x1200), prod, f_q)
                mstore(0x15a0, prod)
            
                prod := mulmod(mload(0x1240), prod, f_q)
                mstore(0x15c0, prod)
            
                prod := mulmod(mload(0x1280), prod, f_q)
                mstore(0x15e0, prod)
            
                prod := mulmod(mload(0x12c0), prod, f_q)
                mstore(0x1600, prod)
            
                prod := mulmod(mload(0x1300), prod, f_q)
                mstore(0x1620, prod)
            
                prod := mulmod(mload(0x1340), prod, f_q)
                mstore(0x1640, prod)
            
                prod := mulmod(mload(0x1380), prod, f_q)
                mstore(0x1660, prod)
            
                prod := mulmod(mload(0x13c0), prod, f_q)
                mstore(0x1680, prod)
            
                prod := mulmod(mload(0x1400), prod, f_q)
                mstore(0x16a0, prod)
            
                prod := mulmod(mload(0xe60), prod, f_q)
                mstore(0x16c0, prod)
            
        }
mstore(0x1700, 32)
mstore(0x1720, 32)
mstore(0x1740, 32)
mstore(0x1760, mload(0x16c0))
mstore(0x1780, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x17a0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x1700, 0xc0, 0x16e0, 0x20), 1), success)
{
            
            let inv := mload(0x16e0)
            let v
        
                    v := mload(0xe60)
                    mstore(3680, mulmod(mload(0x16a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1400)
                    mstore(5120, mulmod(mload(0x1680), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x13c0)
                    mstore(5056, mulmod(mload(0x1660), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1380)
                    mstore(4992, mulmod(mload(0x1640), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1340)
                    mstore(4928, mulmod(mload(0x1620), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1300)
                    mstore(4864, mulmod(mload(0x1600), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x12c0)
                    mstore(4800, mulmod(mload(0x15e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1280)
                    mstore(4736, mulmod(mload(0x15c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1240)
                    mstore(4672, mulmod(mload(0x15a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1200)
                    mstore(4608, mulmod(mload(0x1580), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x11c0)
                    mstore(4544, mulmod(mload(0x1560), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1180)
                    mstore(4480, mulmod(mload(0x1540), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1140)
                    mstore(4416, mulmod(mload(0x1520), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1100)
                    mstore(4352, mulmod(mload(0x1500), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x10c0)
                    mstore(4288, mulmod(mload(0x14e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1080)
                    mstore(4224, mulmod(mload(0x14c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1040)
                    mstore(4160, mulmod(mload(0x14a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1000)
                    mstore(4096, mulmod(mload(0x1480), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xfc0)
                    mstore(4032, mulmod(mload(0x1460), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xf80)
                    mstore(3968, mulmod(mload(0x1440), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xf40)
                    mstore(3904, mulmod(mload(0x1420), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xf00)
                    mstore(3840, mulmod(mload(0xec0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0xec0, inv)

        }
mstore(0x17c0, mulmod(mload(0xea0), mload(0xec0), f_q))
mstore(0x17e0, mulmod(mload(0xee0), mload(0xf00), f_q))
mstore(0x1800, mulmod(mload(0xf20), mload(0xf40), f_q))
mstore(0x1820, mulmod(mload(0xf60), mload(0xf80), f_q))
mstore(0x1840, mulmod(mload(0xfa0), mload(0xfc0), f_q))
mstore(0x1860, mulmod(mload(0xfe0), mload(0x1000), f_q))
mstore(0x1880, mulmod(mload(0x1020), mload(0x1040), f_q))
mstore(0x18a0, mulmod(mload(0x1060), mload(0x1080), f_q))
mstore(0x18c0, mulmod(mload(0x10a0), mload(0x10c0), f_q))
mstore(0x18e0, mulmod(mload(0x10e0), mload(0x1100), f_q))
mstore(0x1900, mulmod(mload(0x1120), mload(0x1140), f_q))
mstore(0x1920, mulmod(mload(0x1160), mload(0x1180), f_q))
mstore(0x1940, mulmod(mload(0x11a0), mload(0x11c0), f_q))
mstore(0x1960, mulmod(mload(0x11e0), mload(0x1200), f_q))
mstore(0x1980, mulmod(mload(0x1220), mload(0x1240), f_q))
mstore(0x19a0, mulmod(mload(0x1260), mload(0x1280), f_q))
mstore(0x19c0, mulmod(mload(0x12a0), mload(0x12c0), f_q))
mstore(0x19e0, mulmod(mload(0x12e0), mload(0x1300), f_q))
mstore(0x1a00, mulmod(mload(0x1320), mload(0x1340), f_q))
mstore(0x1a20, mulmod(mload(0x1360), mload(0x1380), f_q))
mstore(0x1a40, mulmod(mload(0x13a0), mload(0x13c0), f_q))
mstore(0x1a60, mulmod(mload(0x13e0), mload(0x1400), f_q))
{
            let result := mulmod(mload(0x18a0), mload(0xa0), f_q)
result := addmod(mulmod(mload(0x18c0), mload(0xc0), f_q), result, f_q)
result := addmod(mulmod(mload(0x18e0), mload(0xe0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1900), mload(0x100), f_q), result, f_q)
result := addmod(mulmod(mload(0x1920), mload(0x120), f_q), result, f_q)
result := addmod(mulmod(mload(0x1940), mload(0x140), f_q), result, f_q)
result := addmod(mulmod(mload(0x1960), mload(0x160), f_q), result, f_q)
result := addmod(mulmod(mload(0x1980), mload(0x180), f_q), result, f_q)
result := addmod(mulmod(mload(0x19a0), mload(0x1a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x19c0), mload(0x1c0), f_q), result, f_q)
result := addmod(mulmod(mload(0x19e0), mload(0x1e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x1a00), mload(0x200), f_q), result, f_q)
result := addmod(mulmod(mload(0x1a20), mload(0x220), f_q), result, f_q)
result := addmod(mulmod(mload(0x1a40), mload(0x240), f_q), result, f_q)
result := addmod(mulmod(mload(0x1a60), mload(0x260), f_q), result, f_q)
mstore(6784, result)
        }
mstore(0x1aa0, mulmod(mload(0x720), mload(0x700), f_q))
mstore(0x1ac0, addmod(mload(0x6e0), mload(0x1aa0), f_q))
mstore(0x1ae0, addmod(mload(0x1ac0), sub(f_q, mload(0x740)), f_q))
mstore(0x1b00, mulmod(mload(0x1ae0), mload(0x7c0), f_q))
mstore(0x1b20, mulmod(mload(0x540), mload(0x1b00), f_q))
mstore(0x1b40, addmod(1, sub(f_q, mload(0x860)), f_q))
mstore(0x1b60, mulmod(mload(0x1b40), mload(0x18a0), f_q))
mstore(0x1b80, addmod(mload(0x1b20), mload(0x1b60), f_q))
mstore(0x1ba0, mulmod(mload(0x540), mload(0x1b80), f_q))
mstore(0x1bc0, mulmod(mload(0x860), mload(0x860), f_q))
mstore(0x1be0, addmod(mload(0x1bc0), sub(f_q, mload(0x860)), f_q))
mstore(0x1c00, mulmod(mload(0x1be0), mload(0x17c0), f_q))
mstore(0x1c20, addmod(mload(0x1ba0), mload(0x1c00), f_q))
mstore(0x1c40, mulmod(mload(0x540), mload(0x1c20), f_q))
mstore(0x1c60, addmod(1, sub(f_q, mload(0x17c0)), f_q))
mstore(0x1c80, addmod(mload(0x17e0), mload(0x1800), f_q))
mstore(0x1ca0, addmod(mload(0x1c80), mload(0x1820), f_q))
mstore(0x1cc0, addmod(mload(0x1ca0), mload(0x1840), f_q))
mstore(0x1ce0, addmod(mload(0x1cc0), mload(0x1860), f_q))
mstore(0x1d00, addmod(mload(0x1ce0), mload(0x1880), f_q))
mstore(0x1d20, addmod(mload(0x1c60), sub(f_q, mload(0x1d00)), f_q))
mstore(0x1d40, mulmod(mload(0x800), mload(0x3c0), f_q))
mstore(0x1d60, addmod(mload(0x760), mload(0x1d40), f_q))
mstore(0x1d80, addmod(mload(0x1d60), mload(0x420), f_q))
mstore(0x1da0, mulmod(mload(0x820), mload(0x3c0), f_q))
mstore(0x1dc0, addmod(mload(0x6e0), mload(0x1da0), f_q))
mstore(0x1de0, addmod(mload(0x1dc0), mload(0x420), f_q))
mstore(0x1e00, mulmod(mload(0x1de0), mload(0x1d80), f_q))
mstore(0x1e20, mulmod(mload(0x840), mload(0x3c0), f_q))
mstore(0x1e40, addmod(mload(0x1a80), mload(0x1e20), f_q))
mstore(0x1e60, addmod(mload(0x1e40), mload(0x420), f_q))
mstore(0x1e80, mulmod(mload(0x1e60), mload(0x1e00), f_q))
mstore(0x1ea0, mulmod(mload(0x1e80), mload(0x880), f_q))
mstore(0x1ec0, mulmod(1, mload(0x3c0), f_q))
mstore(0x1ee0, mulmod(mload(0x6a0), mload(0x1ec0), f_q))
mstore(0x1f00, addmod(mload(0x760), mload(0x1ee0), f_q))
mstore(0x1f20, addmod(mload(0x1f00), mload(0x420), f_q))
mstore(0x1f40, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x3c0), f_q))
mstore(0x1f60, mulmod(mload(0x6a0), mload(0x1f40), f_q))
mstore(0x1f80, addmod(mload(0x6e0), mload(0x1f60), f_q))
mstore(0x1fa0, addmod(mload(0x1f80), mload(0x420), f_q))
mstore(0x1fc0, mulmod(mload(0x1fa0), mload(0x1f20), f_q))
mstore(0x1fe0, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x3c0), f_q))
mstore(0x2000, mulmod(mload(0x6a0), mload(0x1fe0), f_q))
mstore(0x2020, addmod(mload(0x1a80), mload(0x2000), f_q))
mstore(0x2040, addmod(mload(0x2020), mload(0x420), f_q))
mstore(0x2060, mulmod(mload(0x2040), mload(0x1fc0), f_q))
mstore(0x2080, mulmod(mload(0x2060), mload(0x860), f_q))
mstore(0x20a0, addmod(mload(0x1ea0), sub(f_q, mload(0x2080)), f_q))
mstore(0x20c0, mulmod(mload(0x20a0), mload(0x1d20), f_q))
mstore(0x20e0, addmod(mload(0x1c40), mload(0x20c0), f_q))
mstore(0x2100, mulmod(mload(0x540), mload(0x20e0), f_q))
mstore(0x2120, addmod(1, sub(f_q, mload(0x8a0)), f_q))
mstore(0x2140, mulmod(mload(0x2120), mload(0x18a0), f_q))
mstore(0x2160, addmod(mload(0x2100), mload(0x2140), f_q))
mstore(0x2180, mulmod(mload(0x540), mload(0x2160), f_q))
mstore(0x21a0, mulmod(mload(0x8a0), mload(0x8a0), f_q))
mstore(0x21c0, addmod(mload(0x21a0), sub(f_q, mload(0x8a0)), f_q))
mstore(0x21e0, mulmod(mload(0x21c0), mload(0x17c0), f_q))
mstore(0x2200, addmod(mload(0x2180), mload(0x21e0), f_q))
mstore(0x2220, mulmod(mload(0x540), mload(0x2200), f_q))
mstore(0x2240, addmod(mload(0x8e0), mload(0x3c0), f_q))
mstore(0x2260, mulmod(mload(0x2240), mload(0x8c0), f_q))
mstore(0x2280, addmod(mload(0x920), mload(0x420), f_q))
mstore(0x22a0, mulmod(mload(0x2280), mload(0x2260), f_q))
mstore(0x22c0, mulmod(mload(0x6e0), mload(0x7a0), f_q))
mstore(0x22e0, addmod(mload(0x22c0), mload(0x3c0), f_q))
mstore(0x2300, mulmod(mload(0x22e0), mload(0x8a0), f_q))
mstore(0x2320, addmod(mload(0x780), mload(0x420), f_q))
mstore(0x2340, mulmod(mload(0x2320), mload(0x2300), f_q))
mstore(0x2360, addmod(mload(0x22a0), sub(f_q, mload(0x2340)), f_q))
mstore(0x2380, mulmod(mload(0x2360), mload(0x1d20), f_q))
mstore(0x23a0, addmod(mload(0x2220), mload(0x2380), f_q))
mstore(0x23c0, mulmod(mload(0x540), mload(0x23a0), f_q))
mstore(0x23e0, addmod(mload(0x8e0), sub(f_q, mload(0x920)), f_q))
mstore(0x2400, mulmod(mload(0x23e0), mload(0x18a0), f_q))
mstore(0x2420, addmod(mload(0x23c0), mload(0x2400), f_q))
mstore(0x2440, mulmod(mload(0x540), mload(0x2420), f_q))
mstore(0x2460, mulmod(mload(0x23e0), mload(0x1d20), f_q))
mstore(0x2480, addmod(mload(0x8e0), sub(f_q, mload(0x900)), f_q))
mstore(0x24a0, mulmod(mload(0x2480), mload(0x2460), f_q))
mstore(0x24c0, addmod(mload(0x2440), mload(0x24a0), f_q))
mstore(0x24e0, mulmod(mload(0xe40), mload(0xe40), f_q))
mstore(0x2500, mulmod(mload(0x24e0), mload(0xe40), f_q))
mstore(0x2520, mulmod(mload(0x2500), mload(0xe40), f_q))
mstore(0x2540, mulmod(1, mload(0xe40), f_q))
mstore(0x2560, mulmod(1, mload(0x24e0), f_q))
mstore(0x2580, mulmod(1, mload(0x2500), f_q))
mstore(0x25a0, mulmod(mload(0x24c0), mload(0xe60), f_q))
mstore(0x25c0, mulmod(mload(0xb60), mload(0x6a0), f_q))
mstore(0x25e0, mulmod(mload(0x25c0), mload(0x6a0), f_q))
mstore(0x2600, mulmod(mload(0x6a0), 17329448237240114492580865744088056414251735686965494637158808787419781175510, f_q))
mstore(0x2620, addmod(mload(0xa60), sub(f_q, mload(0x2600)), f_q))
mstore(0x2640, mulmod(mload(0x6a0), 1, f_q))
mstore(0x2660, addmod(mload(0xa60), sub(f_q, mload(0x2640)), f_q))
mstore(0x2680, mulmod(mload(0x6a0), 11451405578697956743456240853980216273390554734748796433026540431386972584651, f_q))
mstore(0x26a0, addmod(mload(0xa60), sub(f_q, mload(0x2680)), f_q))
mstore(0x26c0, mulmod(mload(0x6a0), 8374374965308410102411073611984011876711565317741801500439755773472076597347, f_q))
mstore(0x26e0, addmod(mload(0xa60), sub(f_q, mload(0x26c0)), f_q))
mstore(0x2700, mulmod(mload(0x6a0), 21490807004895109926141140246143262403290679459142140821740925192625185504522, f_q))
mstore(0x2720, addmod(mload(0xa60), sub(f_q, mload(0x2700)), f_q))
mstore(0x2740, mulmod(6616149745577394522356295102346368305374051634342887004165528916468992151333, mload(0x25c0), f_q))
mstore(0x2760, mulmod(mload(0x2740), 1, f_q))
{
            let result := mulmod(mload(0xa60), mload(0x2740), f_q)
result := addmod(mulmod(mload(0x6a0), sub(f_q, mload(0x2760)), f_q), result, f_q)
mstore(10112, result)
        }
mstore(0x27a0, mulmod(530501691302793820034524283154921640443166880847115433758691660016816186416, mload(0x25c0), f_q))
mstore(0x27c0, mulmod(mload(0x27a0), 11451405578697956743456240853980216273390554734748796433026540431386972584651, f_q))
{
            let result := mulmod(mload(0xa60), mload(0x27a0), f_q)
result := addmod(mulmod(mload(0x6a0), sub(f_q, mload(0x27c0)), f_q), result, f_q)
mstore(10208, result)
        }
mstore(0x2800, mulmod(6735468303947967792722299167169712601265763928443086612877978228369959138708, mload(0x25c0), f_q))
mstore(0x2820, mulmod(mload(0x2800), 8374374965308410102411073611984011876711565317741801500439755773472076597347, f_q))
{
            let result := mulmod(mload(0xa60), mload(0x2800), f_q)
result := addmod(mulmod(mload(0x6a0), sub(f_q, mload(0x2820)), f_q), result, f_q)
mstore(10304, result)
        }
mstore(0x2860, mulmod(21558793644302942916864965630979640748886316167261336210841195936026980690666, mload(0x25c0), f_q))
mstore(0x2880, mulmod(mload(0x2860), 21490807004895109926141140246143262403290679459142140821740925192625185504522, f_q))
{
            let result := mulmod(mload(0xa60), mload(0x2860), f_q)
result := addmod(mulmod(mload(0x6a0), sub(f_q, mload(0x2880)), f_q), result, f_q)
mstore(10400, result)
        }
mstore(0x28c0, mulmod(1, mload(0x2660), f_q))
mstore(0x28e0, mulmod(mload(0x28c0), mload(0x26a0), f_q))
mstore(0x2900, mulmod(mload(0x28e0), mload(0x26e0), f_q))
mstore(0x2920, mulmod(mload(0x2900), mload(0x2720), f_q))
mstore(0x2940, mulmod(10436837293141318478790164891277058815157809665667237910671663755188835910967, mload(0x6a0), f_q))
mstore(0x2960, mulmod(mload(0x2940), 1, f_q))
{
            let result := mulmod(mload(0xa60), mload(0x2940), f_q)
result := addmod(mulmod(mload(0x6a0), sub(f_q, mload(0x2960)), f_q), result, f_q)
mstore(10624, result)
        }
mstore(0x29a0, mulmod(11451405578697956743456240853980216273390554734748796433026540431386972584650, mload(0x6a0), f_q))
mstore(0x29c0, mulmod(mload(0x29a0), 11451405578697956743456240853980216273390554734748796433026540431386972584651, f_q))
{
            let result := mulmod(mload(0xa60), mload(0x29a0), f_q)
result := addmod(mulmod(mload(0x6a0), sub(f_q, mload(0x29c0)), f_q), result, f_q)
mstore(10720, result)
        }
mstore(0x2a00, mulmod(4558794634599160729665540001169218674296628713450539706539395399156027320108, mload(0x6a0), f_q))
mstore(0x2a20, mulmod(mload(0x2a00), 1, f_q))
{
            let result := mulmod(mload(0xa60), mload(0x2a00), f_q)
result := addmod(mulmod(mload(0x6a0), sub(f_q, mload(0x2a20)), f_q), result, f_q)
mstore(10816, result)
        }
mstore(0x2a60, mulmod(17329448237240114492580865744088056414251735686965494637158808787419781175509, mload(0x6a0), f_q))
mstore(0x2a80, mulmod(mload(0x2a60), 17329448237240114492580865744088056414251735686965494637158808787419781175510, f_q))
{
            let result := mulmod(mload(0xa60), mload(0x2a60), f_q)
result := addmod(mulmod(mload(0x6a0), sub(f_q, mload(0x2a80)), f_q), result, f_q)
mstore(10912, result)
        }
mstore(0x2ac0, mulmod(mload(0x28c0), mload(0x2620), f_q))
{
            let result := mulmod(mload(0xa60), 1, f_q)
result := addmod(mulmod(mload(0x6a0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q), result, f_q)
mstore(10976, result)
        }
{
            let prod := mload(0x2780)

                prod := mulmod(mload(0x27e0), prod, f_q)
                mstore(0x2b00, prod)
            
                prod := mulmod(mload(0x2840), prod, f_q)
                mstore(0x2b20, prod)
            
                prod := mulmod(mload(0x28a0), prod, f_q)
                mstore(0x2b40, prod)
            
                prod := mulmod(mload(0x2980), prod, f_q)
                mstore(0x2b60, prod)
            
                prod := mulmod(mload(0x29e0), prod, f_q)
                mstore(0x2b80, prod)
            
                prod := mulmod(mload(0x28e0), prod, f_q)
                mstore(0x2ba0, prod)
            
                prod := mulmod(mload(0x2a40), prod, f_q)
                mstore(0x2bc0, prod)
            
                prod := mulmod(mload(0x2aa0), prod, f_q)
                mstore(0x2be0, prod)
            
                prod := mulmod(mload(0x2ac0), prod, f_q)
                mstore(0x2c00, prod)
            
                prod := mulmod(mload(0x2ae0), prod, f_q)
                mstore(0x2c20, prod)
            
                prod := mulmod(mload(0x28c0), prod, f_q)
                mstore(0x2c40, prod)
            
        }
mstore(0x2c80, 32)
mstore(0x2ca0, 32)
mstore(0x2cc0, 32)
mstore(0x2ce0, mload(0x2c40))
mstore(0x2d00, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x2d20, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x2c80, 0xc0, 0x2c60, 0x20), 1), success)
{
            
            let inv := mload(0x2c60)
            let v
        
                    v := mload(0x28c0)
                    mstore(10432, mulmod(mload(0x2c20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2ae0)
                    mstore(10976, mulmod(mload(0x2c00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2ac0)
                    mstore(10944, mulmod(mload(0x2be0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2aa0)
                    mstore(10912, mulmod(mload(0x2bc0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2a40)
                    mstore(10816, mulmod(mload(0x2ba0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x28e0)
                    mstore(10464, mulmod(mload(0x2b80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x29e0)
                    mstore(10720, mulmod(mload(0x2b60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2980)
                    mstore(10624, mulmod(mload(0x2b40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x28a0)
                    mstore(10400, mulmod(mload(0x2b20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2840)
                    mstore(10304, mulmod(mload(0x2b00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x27e0)
                    mstore(10208, mulmod(mload(0x2780), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x2780, inv)

        }
{
            let result := mload(0x2780)
result := addmod(mload(0x27e0), result, f_q)
result := addmod(mload(0x2840), result, f_q)
result := addmod(mload(0x28a0), result, f_q)
mstore(11584, result)
        }
mstore(0x2d60, mulmod(mload(0x2920), mload(0x28e0), f_q))
{
            let result := mload(0x2980)
result := addmod(mload(0x29e0), result, f_q)
mstore(11648, result)
        }
mstore(0x2da0, mulmod(mload(0x2920), mload(0x2ac0), f_q))
{
            let result := mload(0x2a40)
result := addmod(mload(0x2aa0), result, f_q)
mstore(11712, result)
        }
mstore(0x2de0, mulmod(mload(0x2920), mload(0x28c0), f_q))
{
            let result := mload(0x2ae0)
mstore(11776, result)
        }
{
            let prod := mload(0x2d40)

                prod := mulmod(mload(0x2d80), prod, f_q)
                mstore(0x2e20, prod)
            
                prod := mulmod(mload(0x2dc0), prod, f_q)
                mstore(0x2e40, prod)
            
                prod := mulmod(mload(0x2e00), prod, f_q)
                mstore(0x2e60, prod)
            
        }
mstore(0x2ea0, 32)
mstore(0x2ec0, 32)
mstore(0x2ee0, 32)
mstore(0x2f00, mload(0x2e60))
mstore(0x2f20, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x2f40, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x2ea0, 0xc0, 0x2e80, 0x20), 1), success)
{
            
            let inv := mload(0x2e80)
            let v
        
                    v := mload(0x2e00)
                    mstore(11776, mulmod(mload(0x2e40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2dc0)
                    mstore(11712, mulmod(mload(0x2e20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2d80)
                    mstore(11648, mulmod(mload(0x2d40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x2d40, inv)

        }
mstore(0x2f60, mulmod(mload(0x2d60), mload(0x2d80), f_q))
mstore(0x2f80, mulmod(mload(0x2da0), mload(0x2dc0), f_q))
mstore(0x2fa0, mulmod(mload(0x2de0), mload(0x2e00), f_q))
mstore(0x2fc0, mulmod(mload(0x960), mload(0x960), f_q))
mstore(0x2fe0, mulmod(mload(0x2fc0), mload(0x960), f_q))
mstore(0x3000, mulmod(mload(0x2fe0), mload(0x960), f_q))
mstore(0x3020, mulmod(mload(0x3000), mload(0x960), f_q))
mstore(0x3040, mulmod(mload(0x3020), mload(0x960), f_q))
mstore(0x3060, mulmod(mload(0x3040), mload(0x960), f_q))
mstore(0x3080, mulmod(mload(0x3060), mload(0x960), f_q))
mstore(0x30a0, mulmod(mload(0x3080), mload(0x960), f_q))
mstore(0x30c0, mulmod(mload(0x30a0), mload(0x960), f_q))
mstore(0x30e0, mulmod(mload(0x9c0), mload(0x9c0), f_q))
mstore(0x3100, mulmod(mload(0x30e0), mload(0x9c0), f_q))
mstore(0x3120, mulmod(mload(0x3100), mload(0x9c0), f_q))
{
            let result := mulmod(mload(0x6e0), mload(0x2780), f_q)
result := addmod(mulmod(mload(0x700), mload(0x27e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x720), mload(0x2840), f_q), result, f_q)
result := addmod(mulmod(mload(0x740), mload(0x28a0), f_q), result, f_q)
mstore(12608, result)
        }
mstore(0x3160, mulmod(mload(0x3140), mload(0x2d40), f_q))
mstore(0x3180, mulmod(sub(f_q, mload(0x3160)), 1, f_q))
mstore(0x31a0, mulmod(mload(0x3180), 1, f_q))
mstore(0x31c0, mulmod(1, mload(0x2d60), f_q))
{
            let result := mulmod(mload(0x860), mload(0x2980), f_q)
result := addmod(mulmod(mload(0x880), mload(0x29e0), f_q), result, f_q)
mstore(12768, result)
        }
mstore(0x3200, mulmod(mload(0x31e0), mload(0x2f60), f_q))
mstore(0x3220, mulmod(sub(f_q, mload(0x3200)), 1, f_q))
mstore(0x3240, mulmod(mload(0x31c0), 1, f_q))
{
            let result := mulmod(mload(0x8a0), mload(0x2980), f_q)
result := addmod(mulmod(mload(0x8c0), mload(0x29e0), f_q), result, f_q)
mstore(12896, result)
        }
mstore(0x3280, mulmod(mload(0x3260), mload(0x2f60), f_q))
mstore(0x32a0, mulmod(sub(f_q, mload(0x3280)), mload(0x960), f_q))
mstore(0x32c0, mulmod(mload(0x31c0), mload(0x960), f_q))
mstore(0x32e0, addmod(mload(0x3220), mload(0x32a0), f_q))
mstore(0x3300, mulmod(mload(0x32e0), mload(0x9c0), f_q))
mstore(0x3320, mulmod(mload(0x3240), mload(0x9c0), f_q))
mstore(0x3340, mulmod(mload(0x32c0), mload(0x9c0), f_q))
mstore(0x3360, addmod(mload(0x31a0), mload(0x3300), f_q))
mstore(0x3380, mulmod(1, mload(0x2da0), f_q))
{
            let result := mulmod(mload(0x8e0), mload(0x2a40), f_q)
result := addmod(mulmod(mload(0x900), mload(0x2aa0), f_q), result, f_q)
mstore(13216, result)
        }
mstore(0x33c0, mulmod(mload(0x33a0), mload(0x2f80), f_q))
mstore(0x33e0, mulmod(sub(f_q, mload(0x33c0)), 1, f_q))
mstore(0x3400, mulmod(mload(0x3380), 1, f_q))
mstore(0x3420, mulmod(mload(0x33e0), mload(0x30e0), f_q))
mstore(0x3440, mulmod(mload(0x3400), mload(0x30e0), f_q))
mstore(0x3460, addmod(mload(0x3360), mload(0x3420), f_q))
mstore(0x3480, mulmod(1, mload(0x2de0), f_q))
{
            let result := mulmod(mload(0x920), mload(0x2ae0), f_q)
mstore(13472, result)
        }
mstore(0x34c0, mulmod(mload(0x34a0), mload(0x2fa0), f_q))
mstore(0x34e0, mulmod(sub(f_q, mload(0x34c0)), 1, f_q))
mstore(0x3500, mulmod(mload(0x3480), 1, f_q))
{
            let result := mulmod(mload(0x760), mload(0x2ae0), f_q)
mstore(13600, result)
        }
mstore(0x3540, mulmod(mload(0x3520), mload(0x2fa0), f_q))
mstore(0x3560, mulmod(sub(f_q, mload(0x3540)), mload(0x960), f_q))
mstore(0x3580, mulmod(mload(0x3480), mload(0x960), f_q))
mstore(0x35a0, addmod(mload(0x34e0), mload(0x3560), f_q))
{
            let result := mulmod(mload(0x780), mload(0x2ae0), f_q)
mstore(13760, result)
        }
mstore(0x35e0, mulmod(mload(0x35c0), mload(0x2fa0), f_q))
mstore(0x3600, mulmod(sub(f_q, mload(0x35e0)), mload(0x2fc0), f_q))
mstore(0x3620, mulmod(mload(0x3480), mload(0x2fc0), f_q))
mstore(0x3640, addmod(mload(0x35a0), mload(0x3600), f_q))
{
            let result := mulmod(mload(0x7a0), mload(0x2ae0), f_q)
mstore(13920, result)
        }
mstore(0x3680, mulmod(mload(0x3660), mload(0x2fa0), f_q))
mstore(0x36a0, mulmod(sub(f_q, mload(0x3680)), mload(0x2fe0), f_q))
mstore(0x36c0, mulmod(mload(0x3480), mload(0x2fe0), f_q))
mstore(0x36e0, addmod(mload(0x3640), mload(0x36a0), f_q))
{
            let result := mulmod(mload(0x7c0), mload(0x2ae0), f_q)
mstore(14080, result)
        }
mstore(0x3720, mulmod(mload(0x3700), mload(0x2fa0), f_q))
mstore(0x3740, mulmod(sub(f_q, mload(0x3720)), mload(0x3000), f_q))
mstore(0x3760, mulmod(mload(0x3480), mload(0x3000), f_q))
mstore(0x3780, addmod(mload(0x36e0), mload(0x3740), f_q))
{
            let result := mulmod(mload(0x800), mload(0x2ae0), f_q)
mstore(14240, result)
        }
mstore(0x37c0, mulmod(mload(0x37a0), mload(0x2fa0), f_q))
mstore(0x37e0, mulmod(sub(f_q, mload(0x37c0)), mload(0x3020), f_q))
mstore(0x3800, mulmod(mload(0x3480), mload(0x3020), f_q))
mstore(0x3820, addmod(mload(0x3780), mload(0x37e0), f_q))
{
            let result := mulmod(mload(0x820), mload(0x2ae0), f_q)
mstore(14400, result)
        }
mstore(0x3860, mulmod(mload(0x3840), mload(0x2fa0), f_q))
mstore(0x3880, mulmod(sub(f_q, mload(0x3860)), mload(0x3040), f_q))
mstore(0x38a0, mulmod(mload(0x3480), mload(0x3040), f_q))
mstore(0x38c0, addmod(mload(0x3820), mload(0x3880), f_q))
{
            let result := mulmod(mload(0x840), mload(0x2ae0), f_q)
mstore(14560, result)
        }
mstore(0x3900, mulmod(mload(0x38e0), mload(0x2fa0), f_q))
mstore(0x3920, mulmod(sub(f_q, mload(0x3900)), mload(0x3060), f_q))
mstore(0x3940, mulmod(mload(0x3480), mload(0x3060), f_q))
mstore(0x3960, addmod(mload(0x38c0), mload(0x3920), f_q))
mstore(0x3980, mulmod(mload(0x2540), mload(0x2de0), f_q))
mstore(0x39a0, mulmod(mload(0x2560), mload(0x2de0), f_q))
mstore(0x39c0, mulmod(mload(0x2580), mload(0x2de0), f_q))
{
            let result := mulmod(mload(0x25a0), mload(0x2ae0), f_q)
mstore(14816, result)
        }
mstore(0x3a00, mulmod(mload(0x39e0), mload(0x2fa0), f_q))
mstore(0x3a20, mulmod(sub(f_q, mload(0x3a00)), mload(0x3080), f_q))
mstore(0x3a40, mulmod(mload(0x3480), mload(0x3080), f_q))
mstore(0x3a60, mulmod(mload(0x3980), mload(0x3080), f_q))
mstore(0x3a80, mulmod(mload(0x39a0), mload(0x3080), f_q))
mstore(0x3aa0, mulmod(mload(0x39c0), mload(0x3080), f_q))
mstore(0x3ac0, addmod(mload(0x3960), mload(0x3a20), f_q))
{
            let result := mulmod(mload(0x7e0), mload(0x2ae0), f_q)
mstore(15072, result)
        }
mstore(0x3b00, mulmod(mload(0x3ae0), mload(0x2fa0), f_q))
mstore(0x3b20, mulmod(sub(f_q, mload(0x3b00)), mload(0x30a0), f_q))
mstore(0x3b40, mulmod(mload(0x3480), mload(0x30a0), f_q))
mstore(0x3b60, addmod(mload(0x3ac0), mload(0x3b20), f_q))
mstore(0x3b80, mulmod(mload(0x3b60), mload(0x3100), f_q))
mstore(0x3ba0, mulmod(mload(0x3500), mload(0x3100), f_q))
mstore(0x3bc0, mulmod(mload(0x3580), mload(0x3100), f_q))
mstore(0x3be0, mulmod(mload(0x3620), mload(0x3100), f_q))
mstore(0x3c00, mulmod(mload(0x36c0), mload(0x3100), f_q))
mstore(0x3c20, mulmod(mload(0x3760), mload(0x3100), f_q))
mstore(0x3c40, mulmod(mload(0x3800), mload(0x3100), f_q))
mstore(0x3c60, mulmod(mload(0x38a0), mload(0x3100), f_q))
mstore(0x3c80, mulmod(mload(0x3940), mload(0x3100), f_q))
mstore(0x3ca0, mulmod(mload(0x3a40), mload(0x3100), f_q))
mstore(0x3cc0, mulmod(mload(0x3a60), mload(0x3100), f_q))
mstore(0x3ce0, mulmod(mload(0x3a80), mload(0x3100), f_q))
mstore(0x3d00, mulmod(mload(0x3aa0), mload(0x3100), f_q))
mstore(0x3d20, mulmod(mload(0x3b40), mload(0x3100), f_q))
mstore(0x3d40, addmod(mload(0x3460), mload(0x3b80), f_q))
mstore(0x3d60, mulmod(1, mload(0x2920), f_q))
mstore(0x3d80, mulmod(1, mload(0xa60), f_q))
mstore(0x3da0, 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(0x3dc0, 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(0x3de0, mload(0x3d40))
success := and(eq(staticcall(gas(), 0x7, 0x3da0, 0x60, 0x3da0, 0x40), 1), success)
mstore(0x3e00, mload(0x3da0))
                    mstore(0x3e20, mload(0x3dc0))
mstore(0x3e40, mload(0x280))
                    mstore(0x3e60, mload(0x2a0))
success := and(eq(staticcall(gas(), 0x6, 0x3e00, 0x80, 0x3e00, 0x40), 1), success)
mstore(0x3e80, mload(0x460))
                    mstore(0x3ea0, mload(0x480))
mstore(0x3ec0, mload(0x3320))
success := and(eq(staticcall(gas(), 0x7, 0x3e80, 0x60, 0x3e80, 0x40), 1), success)
mstore(0x3ee0, mload(0x3e00))
                    mstore(0x3f00, mload(0x3e20))
mstore(0x3f20, mload(0x3e80))
                    mstore(0x3f40, mload(0x3ea0))
success := and(eq(staticcall(gas(), 0x6, 0x3ee0, 0x80, 0x3ee0, 0x40), 1), success)
mstore(0x3f60, mload(0x4a0))
                    mstore(0x3f80, mload(0x4c0))
mstore(0x3fa0, mload(0x3340))
success := and(eq(staticcall(gas(), 0x7, 0x3f60, 0x60, 0x3f60, 0x40), 1), success)
mstore(0x3fc0, mload(0x3ee0))
                    mstore(0x3fe0, mload(0x3f00))
mstore(0x4000, mload(0x3f60))
                    mstore(0x4020, mload(0x3f80))
success := and(eq(staticcall(gas(), 0x6, 0x3fc0, 0x80, 0x3fc0, 0x40), 1), success)
mstore(0x4040, mload(0x320))
                    mstore(0x4060, mload(0x340))
mstore(0x4080, mload(0x3440))
success := and(eq(staticcall(gas(), 0x7, 0x4040, 0x60, 0x4040, 0x40), 1), success)
mstore(0x40a0, mload(0x3fc0))
                    mstore(0x40c0, mload(0x3fe0))
mstore(0x40e0, mload(0x4040))
                    mstore(0x4100, mload(0x4060))
success := and(eq(staticcall(gas(), 0x6, 0x40a0, 0x80, 0x40a0, 0x40), 1), success)
mstore(0x4120, mload(0x360))
                    mstore(0x4140, mload(0x380))
mstore(0x4160, mload(0x3ba0))
success := and(eq(staticcall(gas(), 0x7, 0x4120, 0x60, 0x4120, 0x40), 1), success)
mstore(0x4180, mload(0x40a0))
                    mstore(0x41a0, mload(0x40c0))
mstore(0x41c0, mload(0x4120))
                    mstore(0x41e0, mload(0x4140))
success := and(eq(staticcall(gas(), 0x6, 0x4180, 0x80, 0x4180, 0x40), 1), success)
mstore(0x4200, 0x0f6cbb0756385a7ec8e555eb84101685ff0226d26c395db4e24df53596f0dc76)
                    mstore(0x4220, 0x1140f5162bd95cbd4c73ceccfe84ea914ded292581d3e02d4c74c55f78366498)
mstore(0x4240, mload(0x3bc0))
success := and(eq(staticcall(gas(), 0x7, 0x4200, 0x60, 0x4200, 0x40), 1), success)
mstore(0x4260, mload(0x4180))
                    mstore(0x4280, mload(0x41a0))
mstore(0x42a0, mload(0x4200))
                    mstore(0x42c0, mload(0x4220))
success := and(eq(staticcall(gas(), 0x6, 0x4260, 0x80, 0x4260, 0x40), 1), success)
mstore(0x42e0, 0x01d98d5263bc490aabe0903ed3464cfbcddf63da8b5276dc21822ce255105f42)
                    mstore(0x4300, 0x0bf89e789c6428f9fcd86c5b18df6da02b13a6009b3bdf76a15c4408a38f19e3)
mstore(0x4320, mload(0x3be0))
success := and(eq(staticcall(gas(), 0x7, 0x42e0, 0x60, 0x42e0, 0x40), 1), success)
mstore(0x4340, mload(0x4260))
                    mstore(0x4360, mload(0x4280))
mstore(0x4380, mload(0x42e0))
                    mstore(0x43a0, mload(0x4300))
success := and(eq(staticcall(gas(), 0x6, 0x4340, 0x80, 0x4340, 0x40), 1), success)
mstore(0x43c0, 0x2715c9b313356f24ea7c8fff2b3eb0e0a2194396ffdfde7074bd786b38bfa1d1)
                    mstore(0x43e0, 0x226da8f14b4da73f3e9c3f88fb4dc54b42292dd853f0a8f57577174be876f19b)
mstore(0x4400, mload(0x3c00))
success := and(eq(staticcall(gas(), 0x7, 0x43c0, 0x60, 0x43c0, 0x40), 1), success)
mstore(0x4420, mload(0x4340))
                    mstore(0x4440, mload(0x4360))
mstore(0x4460, mload(0x43c0))
                    mstore(0x4480, mload(0x43e0))
success := and(eq(staticcall(gas(), 0x6, 0x4420, 0x80, 0x4420, 0x40), 1), success)
mstore(0x44a0, 0x1cfa75c50ec521cee4e8b857d9b982316a31630ca5286c625b57a3133dd9e9cc)
                    mstore(0x44c0, 0x09ce374e040592241a294415b61ff892668c8152011521577f81f183cfe24360)
mstore(0x44e0, mload(0x3c20))
success := and(eq(staticcall(gas(), 0x7, 0x44a0, 0x60, 0x44a0, 0x40), 1), success)
mstore(0x4500, mload(0x4420))
                    mstore(0x4520, mload(0x4440))
mstore(0x4540, mload(0x44a0))
                    mstore(0x4560, mload(0x44c0))
success := and(eq(staticcall(gas(), 0x6, 0x4500, 0x80, 0x4500, 0x40), 1), success)
mstore(0x4580, 0x1e02a78b3093196255e7e30c5d0a7bdf89df212f2ed8ca0bacf0425921f9e813)
                    mstore(0x45a0, 0x155039aad1afe1e3573eb73fa7b5ca4a3e31dd417c0a17c71c620e5ae1ff277e)
mstore(0x45c0, mload(0x3c40))
success := and(eq(staticcall(gas(), 0x7, 0x4580, 0x60, 0x4580, 0x40), 1), success)
mstore(0x45e0, mload(0x4500))
                    mstore(0x4600, mload(0x4520))
mstore(0x4620, mload(0x4580))
                    mstore(0x4640, mload(0x45a0))
success := and(eq(staticcall(gas(), 0x6, 0x45e0, 0x80, 0x45e0, 0x40), 1), success)
mstore(0x4660, 0x267f9d4ee862dfdc35ae0d28825a08a25bc0c272db64bb511c9f8c070da61fca)
                    mstore(0x4680, 0x254a1f18f868c819bdf07d36d1aa972c194cfb91aa48a3fb38b94549b9a8d691)
mstore(0x46a0, mload(0x3c60))
success := and(eq(staticcall(gas(), 0x7, 0x4660, 0x60, 0x4660, 0x40), 1), success)
mstore(0x46c0, mload(0x45e0))
                    mstore(0x46e0, mload(0x4600))
mstore(0x4700, mload(0x4660))
                    mstore(0x4720, mload(0x4680))
success := and(eq(staticcall(gas(), 0x6, 0x46c0, 0x80, 0x46c0, 0x40), 1), success)
mstore(0x4740, 0x238128da6909cea4f581fe5f759b2f6ead9130e71173077691a55c5e7a05cb5a)
                    mstore(0x4760, 0x1aab9d1dc9ee043ee806593d0455cb1825761995d2fee7b56c804754bedbec99)
mstore(0x4780, mload(0x3c80))
success := and(eq(staticcall(gas(), 0x7, 0x4740, 0x60, 0x4740, 0x40), 1), success)
mstore(0x47a0, mload(0x46c0))
                    mstore(0x47c0, mload(0x46e0))
mstore(0x47e0, mload(0x4740))
                    mstore(0x4800, mload(0x4760))
success := and(eq(staticcall(gas(), 0x6, 0x47a0, 0x80, 0x47a0, 0x40), 1), success)
mstore(0x4820, mload(0x580))
                    mstore(0x4840, mload(0x5a0))
mstore(0x4860, mload(0x3ca0))
success := and(eq(staticcall(gas(), 0x7, 0x4820, 0x60, 0x4820, 0x40), 1), success)
mstore(0x4880, mload(0x47a0))
                    mstore(0x48a0, mload(0x47c0))
mstore(0x48c0, mload(0x4820))
                    mstore(0x48e0, mload(0x4840))
success := and(eq(staticcall(gas(), 0x6, 0x4880, 0x80, 0x4880, 0x40), 1), success)
mstore(0x4900, mload(0x5c0))
                    mstore(0x4920, mload(0x5e0))
mstore(0x4940, mload(0x3cc0))
success := and(eq(staticcall(gas(), 0x7, 0x4900, 0x60, 0x4900, 0x40), 1), success)
mstore(0x4960, mload(0x4880))
                    mstore(0x4980, mload(0x48a0))
mstore(0x49a0, mload(0x4900))
                    mstore(0x49c0, mload(0x4920))
success := and(eq(staticcall(gas(), 0x6, 0x4960, 0x80, 0x4960, 0x40), 1), success)
mstore(0x49e0, mload(0x600))
                    mstore(0x4a00, mload(0x620))
mstore(0x4a20, mload(0x3ce0))
success := and(eq(staticcall(gas(), 0x7, 0x49e0, 0x60, 0x49e0, 0x40), 1), success)
mstore(0x4a40, mload(0x4960))
                    mstore(0x4a60, mload(0x4980))
mstore(0x4a80, mload(0x49e0))
                    mstore(0x4aa0, mload(0x4a00))
success := and(eq(staticcall(gas(), 0x6, 0x4a40, 0x80, 0x4a40, 0x40), 1), success)
mstore(0x4ac0, mload(0x640))
                    mstore(0x4ae0, mload(0x660))
mstore(0x4b00, mload(0x3d00))
success := and(eq(staticcall(gas(), 0x7, 0x4ac0, 0x60, 0x4ac0, 0x40), 1), success)
mstore(0x4b20, mload(0x4a40))
                    mstore(0x4b40, mload(0x4a60))
mstore(0x4b60, mload(0x4ac0))
                    mstore(0x4b80, mload(0x4ae0))
success := and(eq(staticcall(gas(), 0x6, 0x4b20, 0x80, 0x4b20, 0x40), 1), success)
mstore(0x4ba0, mload(0x4e0))
                    mstore(0x4bc0, mload(0x500))
mstore(0x4be0, mload(0x3d20))
success := and(eq(staticcall(gas(), 0x7, 0x4ba0, 0x60, 0x4ba0, 0x40), 1), success)
mstore(0x4c00, mload(0x4b20))
                    mstore(0x4c20, mload(0x4b40))
mstore(0x4c40, mload(0x4ba0))
                    mstore(0x4c60, mload(0x4bc0))
success := and(eq(staticcall(gas(), 0x6, 0x4c00, 0x80, 0x4c00, 0x40), 1), success)
mstore(0x4c80, mload(0xa00))
                    mstore(0x4ca0, mload(0xa20))
mstore(0x4cc0, sub(f_q, mload(0x3d60)))
success := and(eq(staticcall(gas(), 0x7, 0x4c80, 0x60, 0x4c80, 0x40), 1), success)
mstore(0x4ce0, mload(0x4c00))
                    mstore(0x4d00, mload(0x4c20))
mstore(0x4d20, mload(0x4c80))
                    mstore(0x4d40, mload(0x4ca0))
success := and(eq(staticcall(gas(), 0x6, 0x4ce0, 0x80, 0x4ce0, 0x40), 1), success)
mstore(0x4d60, mload(0xaa0))
                    mstore(0x4d80, mload(0xac0))
mstore(0x4da0, mload(0x3d80))
success := and(eq(staticcall(gas(), 0x7, 0x4d60, 0x60, 0x4d60, 0x40), 1), success)
mstore(0x4dc0, mload(0x4ce0))
                    mstore(0x4de0, mload(0x4d00))
mstore(0x4e00, mload(0x4d60))
                    mstore(0x4e20, mload(0x4d80))
success := and(eq(staticcall(gas(), 0x6, 0x4dc0, 0x80, 0x4dc0, 0x40), 1), success)
mstore(0x4e40, mload(0x4dc0))
                    mstore(0x4e60, mload(0x4de0))
mstore(0x4e80, mload(0xaa0))
                    mstore(0x4ea0, mload(0xac0))
mstore(0x4ec0, mload(0xae0))
                    mstore(0x4ee0, mload(0xb00))
mstore(0x4f00, mload(0xb20))
                    mstore(0x4f20, mload(0xb40))
mstore(0x4f40, keccak256(0x4e40, 256))
mstore(20320, mod(mload(20288), f_q))
mstore(0x4f80, mulmod(mload(0x4f60), mload(0x4f60), f_q))
mstore(0x4fa0, mulmod(1, mload(0x4f60), f_q))
mstore(0x4fc0, mload(0x4ec0))
                    mstore(0x4fe0, mload(0x4ee0))
mstore(0x5000, mload(0x4fa0))
success := and(eq(staticcall(gas(), 0x7, 0x4fc0, 0x60, 0x4fc0, 0x40), 1), success)
mstore(0x5020, mload(0x4e40))
                    mstore(0x5040, mload(0x4e60))
mstore(0x5060, mload(0x4fc0))
                    mstore(0x5080, mload(0x4fe0))
success := and(eq(staticcall(gas(), 0x6, 0x5020, 0x80, 0x5020, 0x40), 1), success)
mstore(0x50a0, mload(0x4f00))
                    mstore(0x50c0, mload(0x4f20))
mstore(0x50e0, mload(0x4fa0))
success := and(eq(staticcall(gas(), 0x7, 0x50a0, 0x60, 0x50a0, 0x40), 1), success)
mstore(0x5100, mload(0x4e80))
                    mstore(0x5120, mload(0x4ea0))
mstore(0x5140, mload(0x50a0))
                    mstore(0x5160, mload(0x50c0))
success := and(eq(staticcall(gas(), 0x6, 0x5100, 0x80, 0x5100, 0x40), 1), success)
mstore(0x5180, mload(0x5020))
                    mstore(0x51a0, mload(0x5040))
mstore(0x51c0, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x51e0, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x5200, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x5220, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(0x5240, mload(0x5100))
                    mstore(0x5260, mload(0x5120))
mstore(0x5280, 0x0181624e80f3d6ae28df7e01eaeab1c0e919877a3b8a6b7fbc69a6817d596ea2)
            mstore(0x52a0, 0x1783d30dcb12d259bb89098addf6280fa4b653be7a152542a28f7b926e27e648)
            mstore(0x52c0, 0x00ae44489d41a0d179e2dfdc03bddd883b7109f8b6ae316a59e815c1a6b35304)
            mstore(0x52e0, 0x0b2147ab62a386bd63e6de1522109b8c9588ab466f5aadfde8c41ca3749423ee)
success := and(eq(staticcall(gas(), 0x8, 0x5180, 0x180, 0x5180, 0x20), 1), success)
success := and(eq(mload(0x5180), 1), success)

            // Revert if anything fails
            if iszero(success) { revert(0, 0) }

            // Return empty bytes on success
            return(0, 0)

        }
    }
}
        